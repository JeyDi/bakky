[project]
name = "bakky"
version = "0.0.1"
description = "Plug and play generalize backend system"
readme = "README.md"
requires-python = ">=3.12, <3.13"

dependencies = [
    "alembic>=1.15.1",
    "asyncpg>=0.30.0",
    "detect-secrets>=1.5.0",
    "fastapi>=0.115.11",
    "greenlet>=3.1.1",
    "jwt>=1.3.1",
    "loguru>=0.7.3",
    "opentelemetry-api>=1.31.1",
    "opentelemetry-sdk>=1.31.1",
    "pandas>=2.2.3",
    "psycopg>=3.2.6",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
    "python-dotenv>=1.0.1",
    "sentry-sdk>=2.25.1",
    "sqlalchemy>=2.0.39",
    "supabase>=2.15.0",
    "uvicorn>=0.34.0",
]

[dependency-groups]
dev = [
    "black>=24.8.0",
    "commitizen>=3.9.1",
    "deptry>=0.20.0",
    "fsspec>=2024.6.1",
    "ipython>=8.27.0",
    "isort>=5.13.2",
    "jupyter>=1.1.1",
    "memory-profiler>=0.61.0",
    "moto>=5.0.13",
    "mypy>=1.11.2",
    "nbqa>=1.9.1",
    "pre-commit>=3.8.0",
    "pytest>=8.3.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.6.3",
    "sqlalchemy-stubs>=0.4",
    "tox>=4.18.0",
    "types-pyyaml>=6.0.12.20240917",
    "black>=24.8.0",
    "marimo>=0.11.26",
]

##### TOOLS #####
[tool.pytest.ini_options]
markers = [
    "functions: mark test for the base functionalities",
    "core: core functionalities of the system",
    "infrastructure: mark test for the infrastructure functionalities like database, cache, etc.",
    "domain: mark test for the domain functionalities like business logic, etc.",
    "backend: mark test for the backend functionalities like API, etc.",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 120
profile = "black"

[tool.black]
line-length = 120
target-version = ['py310', 'py311']
preview = true

[tool.mypy]
plugins = ["pydantic.mypy", "sqlmypy"]
disallow_untyped_defs = true
disallow_any_unimported = false
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = false
show_error_codes = true
exclude = [
    'volumes/',
    "alembic/",
    "scripts/",
    "docs/",
    "settings/",
    ".vscode/",
    ".venv/",
    ".pytest_cache/",
    ".mypy_cache/",
    ".gitlab/",
    ".github/",
    ".devcontainer/",
    "Docker/",
    "dashboards/",
    "style/src/utils/",
]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["app"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$major.$minor.$patch$prerelease"
version = "0.1.0"
version_files = ["__version__.py", "pyproject.toml:version"]
style = [
    [
        "qmark",
        "fg:#ff9d00 bold",
    ],
    [
        "question",
        "bold",
    ],
    [
        "answer",
        "fg:#ff9d00 bold",
    ],
    [
        "pointer",
        "fg:#ff9d00 bold",
    ],
    [
        "highlighted",
        "fg:#ff9d00 bold",
    ],
    [
        "selected",
        "fg:#cc5454",
    ],
    [
        "separator",
        "fg:#cc5454",
    ],
    [
        "instruction",
        "",
    ],
    [
        "text",
        "",
    ],
    [
        "disabled",
        "fg:#858585 italic",
    ],
]

#### RUFF
[tool.ruff]
line-length = 120
indent-width = 4
output-format = "concise"
# Assume Python 3.10.
target-version = "py310"

# A list of file patterns to include when linting.
include = ["**/pyproject.toml", "*.py", "*.pyi"]
# extend-include = ["*.ipynb"]

# Always autofix, but never try to fix `F401` (unused imports).
fix = true

# Exclude a variety of commonly ignored directories (you can have some problems)
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    "*ipynb_checkpoints",
    # "*.ipynb",
    "notebooks/*",
    "test/*",
    "__init__.py",
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = ["F401"]
# Rules: https://beta.ruff.rs/docs/rules/
# Enable Pyflakes `E` and `F` codes by default.
select = [
    #default
    "E", # pycodestyle error
    "F", #flake8 error
    #extra
    "A",   # bultin shadowing
    "B",   # flake8 bugbear
    "BLE", # aboid bare excepts
    "C4",  # simplify comprehensions
    "D",   # docstyle
    "DTZ", # datetime errors
    "FBT", # avoid boolean trap
    "G",   # logging format
    "I",   # flake8-isort import
    "N",   # pep8 naming
    "RET", # return statements values
    "S",   # bandit
    "YTT", # wrong usage of sys.info
    "B",   # flake8-bugbear
]
ignore = [
    "B008",   # do not perform function calls in argument defaults
    "BLE001", #Do not catch blind exception: {name}
    "C901",   # too complex
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "D417",   # Missing argument description in the docstring for {definition}: {name}
    "E501",   # Line too long ({width} > {limit} characters)
    "E501",   # line too long, handled by black
    "D100",
    "FBT001", # boolean trap
    "FBT002", # boolean trap
    "G004",   # logging statement using fstring formatting
    "S608",   # Possible SQL injection vector TODO: To fix later!
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# select = ["E4", "E7", "E9", "F"]
# exclude = ["*.ipynb"]
# ignore = []
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401", "I002"]
"test*.py" = ["S101", "T201"]
